// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	serviceec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
)

// EC2InstancesPaginator is an autogenerated mock type for the EC2InstancesPaginator type
type EC2InstancesPaginator struct {
	mock.Mock
}

// HasMorePages provides a mock function with no fields
func (_m *EC2InstancesPaginator) HasMorePages() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasMorePages")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NextPage provides a mock function with given fields: ctx, optFns
func (_m *EC2InstancesPaginator) NextPage(ctx context.Context, optFns ...func(*serviceec2.Options)) (*serviceec2.DescribeInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NextPage")
	}

	var r0 *serviceec2.DescribeInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*serviceec2.Options)) (*serviceec2.DescribeInstancesOutput, error)); ok {
		return rf(ctx, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*serviceec2.Options)) *serviceec2.DescribeInstancesOutput); ok {
		r0 = rf(ctx, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceec2.DescribeInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...func(*serviceec2.Options)) error); ok {
		r1 = rf(ctx, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEC2InstancesPaginator creates a new instance of EC2InstancesPaginator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEC2InstancesPaginator(t interface {
	mock.TestingT
	Cleanup(func())
}) *EC2InstancesPaginator {
	mock := &EC2InstancesPaginator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
