// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/olusolaa/infra-drift-detector/internal/core/domain"
	mock "github.com/stretchr/testify/mock"

	ports "github.com/olusolaa/infra-drift-detector/internal/core/ports"
)

// Matcher is an autogenerated mock type for the Matcher type
type Matcher struct {
	mock.Mock
}

// Match provides a mock function with given fields: ctx, desired, actual
func (_m *Matcher) Match(ctx context.Context, desired []domain.StateResource, actual []domain.PlatformResource) (ports.MatchingResult, error) {
	ret := _m.Called(ctx, desired, actual)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 ports.MatchingResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.StateResource, []domain.PlatformResource) (ports.MatchingResult, error)); ok {
		return rf(ctx, desired, actual)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.StateResource, []domain.PlatformResource) ports.MatchingResult); ok {
		r0 = rf(ctx, desired, actual)
	} else {
		r0 = ret.Get(0).(ports.MatchingResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.StateResource, []domain.PlatformResource) error); ok {
		r1 = rf(ctx, desired, actual)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMatcher creates a new instance of Matcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Matcher {
	mock := &Matcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
