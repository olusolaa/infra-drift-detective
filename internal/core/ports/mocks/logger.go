// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/olusolaa/infra-drift-detector/internal/core/ports"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debugf provides a mock function with given fields: ctx, format, args
func (_m *Logger) Debugf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: ctx, err, format, args
func (_m *Logger) Errorf(ctx context.Context, err error, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, err, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: ctx, format, args
func (_m *Logger) Infof(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: ctx, format, args
func (_m *Logger) Warnf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WithFields provides a mock function with given fields: fields
func (_m *Logger) WithFields(fields map[string]interface{}) ports.Logger {
	ret := _m.Called(fields)

	if len(ret) == 0 {
		panic("no return value specified for WithFields")
	}

	var r0 ports.Logger
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ports.Logger); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.Logger)
		}
	}

	return r0
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
