// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/olusolaa/infra-drift-detector/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// PlatformProvider is an autogenerated mock type for the PlatformProvider type
type PlatformProvider struct {
	mock.Mock
}

// GetResource provides a mock function with given fields: ctx, kind, id
func (_m *PlatformProvider) GetResource(ctx context.Context, kind domain.ResourceKind, id string) (domain.PlatformResource, error) {
	ret := _m.Called(ctx, kind, id)

	if len(ret) == 0 {
		panic("no return value specified for GetResource")
	}

	var r0 domain.PlatformResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ResourceKind, string) (domain.PlatformResource, error)); ok {
		return rf(ctx, kind, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ResourceKind, string) domain.PlatformResource); ok {
		r0 = rf(ctx, kind, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PlatformResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ResourceKind, string) error); ok {
		r1 = rf(ctx, kind, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResources provides a mock function with given fields: ctx, requestedKinds, filters, out
func (_m *PlatformProvider) ListResources(ctx context.Context, requestedKinds []domain.ResourceKind, filters map[string]string, out chan<- domain.PlatformResource) error {
	ret := _m.Called(ctx, requestedKinds, filters, out)

	if len(ret) == 0 {
		panic("no return value specified for ListResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.ResourceKind, map[string]string, chan<- domain.PlatformResource) error); ok {
		r0 = rf(ctx, requestedKinds, filters, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Type provides a mock function with no fields
func (_m *PlatformProvider) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewPlatformProvider creates a new instance of PlatformProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlatformProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlatformProvider {
	mock := &PlatformProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
