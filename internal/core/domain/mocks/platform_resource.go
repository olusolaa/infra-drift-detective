// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/olusolaa/infra-drift-detector/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// PlatformResource is an autogenerated mock type for the PlatformResource type
type PlatformResource struct {
	mock.Mock
}

// Attributes provides a mock function with given fields: ctx
func (_m *PlatformResource) Attributes(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Attributes")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metadata provides a mock function with no fields
func (_m *PlatformResource) Metadata() domain.ResourceMetadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 domain.ResourceMetadata
	if rf, ok := ret.Get(0).(func() domain.ResourceMetadata); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.ResourceMetadata)
	}

	return r0
}

// NewPlatformResource creates a new instance of PlatformResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlatformResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlatformResource {
	mock := &PlatformResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
